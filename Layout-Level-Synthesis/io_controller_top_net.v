/*
###############################################################
#  Generated by:      Cadence Innovus 18.10-p002_1
#  OS:                Linux x86_64(Host ID ssh-soc)
#  Generated on:      Sun Dec  6 21:31:07 2020
#  Design:            io_controller_top
#  Command:           saveNetlist ../proj/io_controller_top_net.v
###############################################################
*/
// Generated by Cadence Encounter(R) RTL Compiler RC14.13 - v14.10-s027_1
// Verification Directory fv/io_controller_top 
module io_controller (
	clk, 
	wd_rst, 
	opcode, 
	io_pipe_req);
   input clk;
   input wd_rst;
   input [8:0] opcode;
   output [9:0] io_pipe_req;

   // Internal wires
   wire [3:0] present_state;
   wire n_0;
   wire n_1;
   wire n_2;
   wire n_3;
   wire n_4;
   wire n_5;
   wire n_6;
   wire n_7;
   wire n_8;
   wire n_9;
   wire n_10;
   wire n_11;
   wire n_12;
   wire n_13;
   wire n_14;
   wire n_15;
   wire n_16;
   wire n_17;
   wire n_18;
   wire n_19;
   wire n_20;
   wire n_21;
   wire n_22;
   wire n_23;
   wire n_24;
   wire n_25;
   wire n_26;
   wire n_27;
   wire n_28;
   wire n_29;
   wire n_30;
   wire n_31;
   wire n_32;
   wire n_33;
   wire n_34;
   wire n_35;
   wire n_36;
   wire n_37;
   wire n_38;
   wire n_39;
   wire n_40;
   wire n_41;
   wire n_42;
   wire n_43;
   wire n_44;
   wire n_45;
   wire n_46;
   wire n_47;
   wire n_48;
   wire n_49;
   wire n_50;
   wire n_51;
   wire n_52;
   wire n_60;

   NOR2X1 g613 (.Y(io_pipe_req[7]),
	.A(n_45),
	.B(n_50));
   AND2XL g614 (.Y(io_pipe_req[3]),
	.A(present_state[0]),
	.B(n_51));
   NOR2X1 g615 (.Y(io_pipe_req[0]),
	.A(present_state[0]),
	.B(n_50));
   NOR2X1 g616 (.Y(io_pipe_req[6]),
	.A(present_state[0]),
	.B(n_48));
   NOR2X1 g617 (.Y(io_pipe_req[5]),
	.A(n_45),
	.B(n_48));
   NOR2BX1 g618 (.Y(io_pipe_req[4]),
	.AN(n_51),
	.B(present_state[0]));
   NOR2X1 g619 (.Y(io_pipe_req[9]),
	.A(present_state[0]),
	.B(n_49));
   NOR2X1 g620 (.Y(io_pipe_req[8]),
	.A(n_45),
	.B(n_49));
   NOR2X1 g621 (.Y(io_pipe_req[2]),
	.A(present_state[0]),
	.B(n_47));
   NOR2X1 g622 (.Y(io_pipe_req[1]),
	.A(n_45),
	.B(n_47));
   NOR2X1 g623 (.Y(n_51),
	.A(present_state[2]),
	.B(n_46));
   NAND2BX1 g624 (.Y(n_50),
	.AN(n_46),
	.B(present_state[2]));
   OR2XL g625 (.Y(n_49),
	.A(present_state[3]),
	.B(n_60));
   NAND2BX1 g626 (.Y(n_48),
	.AN(n_60),
	.B(present_state[3]));
   NAND3BXL g627 (.Y(n_47),
	.AN(present_state[1]),
	.B(present_state[2]),
	.C(n_52));
   OR2XL g628 (.Y(n_60),
	.A(present_state[2]),
	.B(present_state[1]));
   NAND2X1 g629 (.Y(n_46),
	.A(present_state[1]),
	.B(n_52));
   INVX1 g631 (.Y(n_52),
	.A(present_state[3]));
   DFFQXL \present_state_reg[1]  (.Q(present_state[1]),
	.D(n_43),
	.CK(clk));
   DFFHQX1 \present_state_reg[2]  (.Q(present_state[2]),
	.D(n_42),
	.CK(clk));
   OAI211X1 g1179 (.Y(n_44),
	.A0(opcode[4]),
	.A1(n_31),
	.B0(n_38),
	.C0(n_39));
   NAND2X1 g1180 (.Y(n_43),
	.A(n_41),
	.B(n_39));
   OAI21X1 g1181 (.Y(n_42),
	.A0(wd_rst),
	.A1(n_40),
	.B0(n_6));
   AOI31X1 g1182 (.Y(n_41),
	.A0(n_11),
	.A1(n_22),
	.A2(io_pipe_req[2]),
	.B0(n_37));
   NOR2BX1 g1183 (.Y(n_40),
	.AN(n_36),
	.B(io_pipe_req[2]));
   OA21X1 g1184 (.Y(n_39),
	.A0(wd_rst),
	.A1(n_33),
	.B0(n_7));
   AOI22X1 g1185 (.Y(n_38),
	.A0(n_1),
	.A1(n_35),
	.B0(n_5),
	.B1(n_27));
   OAI22X1 g1186 (.Y(n_37),
	.A0(wd_rst),
	.A1(n_34),
	.B0(n_6),
	.B1(n_27));
   AOI221X1 g1187 (.Y(n_36),
	.A0(n_29),
	.A1(io_pipe_req[3]),
	.B0(n_27),
	.B1(io_pipe_req[0]),
	.C0(n_20));
   NAND4XL g1188 (.Y(n_35),
	.A(n_8),
	.B(n_21),
	.C(n_17),
	.D(n_32));
   AOI211XL g1189 (.Y(n_34),
	.A0(n_26),
	.A1(io_pipe_req[8]),
	.B0(io_pipe_req[4]),
	.C0(io_pipe_req[0]));
   AOI21X1 g1190 (.Y(n_33),
	.A0(n_28),
	.A1(io_pipe_req[3]),
	.B0(n_20));
   DFFHQX1 \present_state_reg[3]  (.Q(present_state[3]),
	.D(n_30),
	.CK(clk));
   NAND2X1 g1192 (.Y(n_32),
	.A(n_25),
	.B(io_pipe_req[8]));
   NAND2BX1 g1193 (.Y(n_31),
	.AN(n_24),
	.B(n_11));
   OAI2BB1X1 g1194 (.Y(n_30),
	.A0N(n_1),
	.A1N(n_23),
	.B0(n_7));
   INVX1 g1195 (.Y(n_29),
	.A(n_28));
   NAND3BXL g1196 (.Y(n_28),
	.AN(opcode[0]),
	.B(opcode[2]),
	.C(n_22));
   NAND3BXL g1197 (.Y(n_27),
	.AN(opcode[2]),
	.B(opcode[0]),
	.C(n_22));
   INVX1 g1198 (.Y(n_26),
	.A(n_25));
   NAND4BXL g1199 (.Y(n_25),
	.AN(opcode[3]),
	.B(opcode[4]),
	.C(n_18),
	.D(n_3));
   AOI32X1 g1200 (.Y(n_24),
	.A0(opcode[3]),
	.A1(n_18),
	.A2(io_pipe_req[4]),
	.B0(n_19),
	.B1(io_pipe_req[2]));
   NAND2X1 g1201 (.Y(n_23),
	.A(n_16),
	.B(n_21));
   NOR3BXL g1202 (.Y(n_22),
	.AN(n_18),
	.B(opcode[4]),
	.C(opcode[3]));
   AOI32X1 g1203 (.Y(n_21),
	.A0(opcode[5]),
	.A1(n_0),
	.A2(n_12),
	.B0(n_10),
	.B1(io_pipe_req[5]));
   OAI31X1 g1204 (.Y(n_20),
	.A0(opcode[5]),
	.A1(opcode[6]),
	.A2(n_9),
	.B0(n_15));
   NOR3BXL g1205 (.Y(n_19),
	.AN(opcode[1]),
	.B(n_14),
	.C(opcode[3]));
   NOR2XL g1206 (.Y(n_18),
	.A(n_14),
	.B(opcode[1]));
   OAI21X1 g1207 (.Y(n_17),
	.A0(io_pipe_req[9]),
	.A1(io_pipe_req[6]),
	.B0(n_13));
   AOI32X1 g1208 (.Y(n_16),
	.A0(opcode[6]),
	.A1(n_4),
	.A2(n_2),
	.B0(n_10),
	.B1(io_pipe_req[6]));
   NAND2X1 g1209 (.Y(n_15),
	.A(n_10),
	.B(io_pipe_req[7]));
   INVX1 g1210 (.Y(n_13),
	.A(n_14));
   NAND2BXL g1211 (.Y(n_14),
	.AN(n_10),
	.B(opcode[8]));
   NOR2BX1 g1212 (.Y(n_12),
	.AN(n_2),
	.B(opcode[7]));
   AND2X1 g1213 (.Y(n_11),
	.A(n_3),
	.B(n_1));
   NAND2XL g1214 (.Y(n_10),
	.A(n_0),
	.B(n_4));
   NAND2X1 g1215 (.Y(n_9),
	.A(opcode[7]),
	.B(n_2));
   OAI21X1 g1216 (.Y(n_8),
	.A0(io_pipe_req[5]),
	.A1(io_pipe_req[7]),
	.B0(opcode[8]));
   NAND3BXL g1217 (.Y(n_7),
	.AN(n_52),
	.B(n_1),
	.C(n_60));
   INVX1 g1218 (.Y(n_5),
	.A(n_6));
   NAND2X1 g1219 (.Y(n_6),
	.A(n_1),
	.B(io_pipe_req[1]));
   NOR2XL g1220 (.Y(n_4),
	.A(opcode[5]),
	.B(opcode[7]));
   NOR2XL g1221 (.Y(n_3),
	.A(opcode[2]),
	.B(opcode[0]));
   NOR2BX1 g1222 (.Y(n_2),
	.AN(io_pipe_req[9]),
	.B(opcode[8]));
   INVX1 g1223 (.Y(n_1),
	.A(wd_rst));
   INVX1 g1224 (.Y(n_0),
	.A(opcode[6]));
   DFFX1 \present_state_reg[0]  (.Q(present_state[0]),
	.QN(n_45),
	.D(n_44),
	.CK(clk));
endmodule

module opcode_encoder (
	app_activate, 
	app_hibernate, 
	timer_sleep, 
	charger_charge, 
	afe_ok, 
	a2d_ok, 
	dsp_ok, 
	blem_ok, 
	opcode);
   input app_activate;
   input app_hibernate;
   input timer_sleep;
   input charger_charge;
   input afe_ok;
   input a2d_ok;
   input dsp_ok;
   input blem_ok;
   output [8:0] opcode;

   // Internal wires
   wire n_2;

   assign opcode[5] = opcode[8] ;
   assign opcode[6] = opcode[8] ;
   assign opcode[7] = opcode[8] ;

   AND2X1 g72 (.Y(opcode[3]),
	.A(n_2),
	.B(afe_ok));
   AND2X1 g73 (.Y(opcode[2]),
	.A(n_2),
	.B(a2d_ok));
   AND2X1 g74 (.Y(opcode[1]),
	.A(n_2),
	.B(dsp_ok));
   AND2X1 g75 (.Y(opcode[0]),
	.A(n_2),
	.B(blem_ok));
   INVX1 g76 (.Y(opcode[4]),
	.A(n_2));
   NAND4X1 g77 (.Y(n_2),
	.A(blem_ok),
	.B(dsp_ok),
	.C(afe_ok),
	.D(a2d_ok));
   TIELO tie_0_cell (.Y(opcode[8]));
endmodule

module io_controller_top (
	VDD, 
	VSS, 
	clk, 
	wd_rst, 
	app_activate, 
	app_hibernate, 
	timer_sleep, 
	charger_charge, 
	afe_ok, 
	a2d_ok, 
	dsp_ok, 
	blem_ok, 
	idle_o, 
	activate_o, 
	hibernate_o, 
	sleep_o, 
	charge_o, 
	stream_eeg_o, 
	process_eeg_o, 
	interpret_eeg_o, 
	build_ble_cmd_o, 
	publish_ble_cmd_o);
   inout VDD;
   inout VSS;
   input clk;
   input wd_rst;
   input app_activate;
   input app_hibernate;
   input timer_sleep;
   input charger_charge;
   input afe_ok;
   input a2d_ok;
   input dsp_ok;
   input blem_ok;
   output idle_o;
   output activate_o;
   output hibernate_o;
   output sleep_o;
   output charge_o;
   output stream_eeg_o;
   output process_eeg_o;
   output interpret_eeg_o;
   output build_ble_cmd_o;
   output publish_ble_cmd_o;

   // Internal wires
   wire [8:0] opcode;
   wire UNCONNECTED;
   wire UNCONNECTED0;
   wire UNCONNECTED1;
   wire UNCONNECTED2;
   wire logic_0_1_net;

   io_controller ic (.clk(clk),
	.wd_rst(wd_rst),
	.opcode({ app_activate,
		app_hibernate,
		timer_sleep,
		charger_charge,
		opcode[4],
		opcode[3],
		opcode[2],
		opcode[1],
		opcode[0] }),
	.io_pipe_req({ idle_o,
		activate_o,
		hibernate_o,
		sleep_o,
		charge_o,
		stream_eeg_o,
		process_eeg_o,
		interpret_eeg_o,
		build_ble_cmd_o,
		publish_ble_cmd_o }));
   opcode_encoder oe (.app_activate(logic_0_1_net),
	.app_hibernate(logic_0_1_net),
	.timer_sleep(logic_0_1_net),
	.charger_charge(logic_0_1_net),
	.afe_ok(afe_ok),
	.a2d_ok(a2d_ok),
	.dsp_ok(dsp_ok),
	.blem_ok(blem_ok),
	.opcode({ UNCONNECTED2,
		UNCONNECTED1,
		UNCONNECTED0,
		UNCONNECTED,
		opcode[4],
		opcode[3],
		opcode[2],
		opcode[1],
		opcode[0] }));
   TIELO tie_0_cell (.Y(logic_0_1_net));
endmodule

